@page "/menu"
@inject HttpClient http

<h1>Menu</h1>

@if (menu != null)
{
    @*<AuthorizeView>
        <Authorized>*@
    <div class="form-group">
        <a class="btn btn-info" href="menu/create">New Menu Item</a>
    </div>
    @*</Authorized>
        </AuthorizeView>*@

    <div class="form-inline">
        <select class="form-control mb-2 mr-sm-2"
                @onchange="OnCategorySelected">
            <option value=" ">All categories</option>
            @foreach (var category in categories)
            {
                <option value="@category.Name">@(category.Name)s</option>
            }
        </select>
    </div>

    <div class="form-inline">
        <label class="sr-only" for="filter-name">Filter</label>
        <input type="text" class="form-control mb-2 mr-sm-2"
               @bind="nameFilter"
               placeholder="Filter by name" />
        <button type="button" class="btn btn-primary mr-sm-2 mb-2"
                @onclick="Filter">
            Filter
        </button>
        <button type="button" class="btn btn-danger mb-2"
                @onclick="Clear">
            Clear
        </button>
    </div>

    <div class="card-wrapper">
        @foreach (var item in menu)
        {
            <div class="card">
                @if (!string.IsNullOrEmpty(item.Image))
                {
                    <img class="card-img no-select" src="data:image/jpeg;base64, @item.Image">
                }
                else
                {
                    <img class="card-img no-select" src="https://cdn.shopify.com/s/files/1/2484/1814/products/Cutlery_1-min_537a91e3-9385-4a0c-9d57-3a098ac150d3_1024x1024@2x.png?v=1514808515">
                }
                <div class="card-text">
                    <div class="card-info">
                        <p class="card-title">@item.Type @item.Name</p>
                        <p class="card-line">@item.Rating stars</p>
                        @if (item.Unit != null)
                        {
                            <p class="card-line">@item.Portion @item.Unit</p>
                        }
                        @if (!string.IsNullOrEmpty(item.CookingTime))
                        {
                            <p class="card-line">@item.CookingTime to cook</p>
                        }
                        else if (item.CookingTime == "00:00:00")
                        {
                            <p class="card-line">Immediate service</p>
                        }
                        <p class="btn card-price">@(item.Price == "0,00" ? "Free" : $"${item.Price}")</p>
                        <a class="btn btn-info card-order" href="/menu/@item.Id">Order</a>
                    </div>
                </div>
            </div>
        }
    </div>

    if (totalPages > 1)
    {
        <Pagination CurrentPage="currentPage" TotalPages="totalPages" SelectedPage="SelectedPage" />
    }
    else if (!menu.Any())
    {
        <p>No items found.</p>
    }
}
else
{
    <img src="https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" />
}

@code {
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages;
    private string nameFilter;
    private string categoryFilter;
    private List<MenuItem> menu;
    private List<DishType> categories = new List<DishType>();

    protected override async Task OnInitializedAsync()
    {
        await LoadMenu();
        await LoadCategories();
    }

    private async Task SelectedPage(int pageNbr)
    {
        currentPage = pageNbr;
        await LoadMenu(pageNbr);
    }

    private async Task OnCategorySelected(ChangeEventArgs e)
    {
        categoryFilter = e.Value.ToString();
        await SelectedPage(1);
    }

    private async Task Filter()
    {
        currentPage = 1;
        await LoadMenu();
    }

    private async Task Clear()
    {
        nameFilter = string.Empty;
        await Filter();
    }

    private async Task LoadMenu(int page = 1)
    {
        var response = await http.GetAsync($"api/menu?pageNumber={page}&pageSize={pageSize}&name={nameFilter}&category={categoryFilter}");
        if (response.IsSuccessStatusCode)
        {
            totalPages = int.Parse(response.Headers.GetValues("totalPages").FirstOrDefault());
            var json = await response.Content.ReadAsStringAsync();
            menu = JsonSerializer.Deserialize<List<MenuItem>>(json, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
    }

    private async Task LoadCategories()
    {
        var response = await http.GetAsync($"api/org/types");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            categories = JsonSerializer.Deserialize<List<DishType>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
    }
}
